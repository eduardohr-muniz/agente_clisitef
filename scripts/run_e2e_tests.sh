#!/bin/bash

# Script para executar testes E2E do servi√ßo de cancelamento CliSiTef
# 
# Este script facilita a execu√ß√£o dos testes end-to-end,
# incluindo verifica√ß√£o de depend√™ncias e configura√ß√µes.

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "=================================================="
    echo "üß™ Testes E2E - Servi√ßo de Cancelamento CliSiTef"
    echo "=================================================="
    echo -e "${NC}"
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    print_info "Verificando depend√™ncias..."
    
    # Verificar Flutter
    if ! command -v flutter &> /dev/null; then
        print_error "Flutter n√£o encontrado. Instale o Flutter primeiro."
        exit 1
    fi
    
    # Verificar Dart
    if ! command -v dart &> /dev/null; then
        print_error "Dart n√£o encontrado. Instale o Dart primeiro."
        exit 1
    fi
    
    print_success "Depend√™ncias verificadas com sucesso"
}

# Fun√ß√£o para verificar configura√ß√£o
check_configuration() {
    print_info "Verificando configura√ß√£o..."
    
    # Verificar se o arquivo de configura√ß√£o existe
    if [ ! -f "test/e2e_config.yaml" ]; then
        print_warning "Arquivo de configura√ß√£o n√£o encontrado. Usando configura√ß√µes padr√£o."
    else
        print_success "Arquivo de configura√ß√£o encontrado"
    fi
    
    # Verificar se o diret√≥rio de logs existe
    if [ ! -d "logs" ]; then
        print_info "Criando diret√≥rio de logs..."
        mkdir -p logs
    fi
}

# Fun√ß√£o para executar testes unit√°rios
run_unit_tests() {
    print_info "Executando testes unit√°rios E2E..."
    
    if flutter test test/clisitef_cancelamento_service_e2e_test.dart --reporter=expanded; then
        print_success "Testes unit√°rios executados com sucesso"
    else
        print_error "Falha nos testes unit√°rios"
        return 1
    fi
}

# Fun√ß√£o para executar teste manual
run_manual_test() {
    print_info "Executando teste manual E2E..."
    
    if dart test/run_e2e_test.dart; then
        print_success "Teste manual executado com sucesso"
    else
        print_error "Falha no teste manual"
        return 1
    fi
}

# Fun√ß√£o para gerar relat√≥rio
generate_report() {
    print_info "Gerando relat√≥rio de testes..."
    
    local timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
    local report_file="logs/e2e_report_${timestamp}.txt"
    
    cat > "$report_file" << EOF
Relat√≥rio de Testes E2E - CliSiTef Cancelamento
===============================================
Data: $(date)
Executado por: $(whoami)
Sistema: $(uname -a)

Resultados:
- Testes Unit√°rios: $([ $? -eq 0 ] && echo "‚úÖ Sucesso" || echo "‚ùå Falha")
- Teste Manual: $([ $? -eq 0 ] && echo "‚úÖ Sucesso" || echo "‚ùå Falha")

Configura√ß√£o:
- IP: 127.0.0.1
- Store ID: 00000000
- Terminal ID: REST0001
- Operador: CAIXA

Logs dispon√≠veis em: ./logs/
EOF

    print_success "Relat√≥rio gerado: $report_file"
}

# Fun√ß√£o para limpar recursos
cleanup() {
    print_info "Limpando recursos..."
    
    # Limpar arquivos tempor√°rios
    find . -name "*.tmp" -delete 2>/dev/null || true
    
    print_success "Limpeza conclu√≠da"
}

# Fun√ß√£o principal
main() {
    print_header
    
    # Verificar argumentos
    case "${1:-all}" in
        "unit")
            print_info "Executando apenas testes unit√°rios..."
            check_dependencies
            check_configuration
            run_unit_tests
            ;;
        "manual")
            print_info "Executando apenas teste manual..."
            check_dependencies
            check_configuration
            run_manual_test
            ;;
        "all")
            print_info "Executando todos os testes..."
            check_dependencies
            check_configuration
            run_unit_tests
            run_manual_test
            ;;
        "help"|"-h"|"--help")
            echo "Uso: $0 [op√ß√£o]"
            echo ""
            echo "Op√ß√µes:"
            echo "  unit     - Executar apenas testes unit√°rios"
            echo "  manual   - Executar apenas teste manual"
            echo "  all      - Executar todos os testes (padr√£o)"
            echo "  help     - Mostrar esta ajuda"
            echo ""
            echo "Exemplos:"
            echo "  $0           # Executar todos os testes"
            echo "  $0 unit      # Executar apenas testes unit√°rios"
            echo "  $0 manual    # Executar apenas teste manual"
            exit 0
            ;;
        *)
            print_error "Op√ß√£o inv√°lida: $1"
            echo "Use '$0 help' para ver as op√ß√µes dispon√≠veis"
            exit 1
            ;;
    esac
    
    generate_report
    cleanup
    
    print_success "Todos os testes conclu√≠dos com sucesso!"
    echo ""
    echo "üìä Relat√≥rios dispon√≠veis em: ./logs/"
    echo "üìù Logs detalhados em: ./logs/e2e_test_$(date +%Y-%m-%d).log"
}

# Capturar sinais para limpeza
trap cleanup EXIT INT TERM

# Executar fun√ß√£o principal
main "$@"
